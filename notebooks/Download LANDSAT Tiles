{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Download LANDSAT Tiles","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMSwmZHqH2+23RZXRdS8kQw"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"5MyLAHRpI6Vc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1595953044632,"user_tz":420,"elapsed":10039,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}},"outputId":"3a0830a4-d9b2-4444-ca9e-ef60c6114e8d"},"source":["! pip install geopandas -q"],"execution_count":2,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 972kB 2.8MB/s \n","\u001b[K     |████████████████████████████████| 71kB 6.8MB/s \n","\u001b[K     |████████████████████████████████| 14.7MB 308kB/s \n","\u001b[K     |████████████████████████████████| 10.9MB 43.0MB/s \n","\u001b[?25h  Building wheel for rtree (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8VvxO-yVI9ux","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595954892333,"user_tz":420,"elapsed":321,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["import ee\n","import os\n","import geopandas as gpd\n","import numpy as np\n","\n","from datetime import datetime\n","from datetime import timedelta"],"execution_count":48,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zctQZgxYJLYa","colab_type":"text"},"source":["## Get Earth Engine Running\n","To access GEE, we will need to authenticate our account, and then initialize a connection to a server. "]},{"cell_type":"code","metadata":{"id":"NVpVYMc1JMho","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1595955027513,"user_tz":420,"elapsed":15519,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}},"outputId":"e4bac24d-1a8d-44e6-ac88-6a33932ef298"},"source":["ee.Authenticate()"],"execution_count":54,"outputs":[{"output_type":"stream","text":["To authorize access needed by Earth Engine, open the following URL in a web browser and follow the instructions. If the web browser does not start automatically, please manually browse the URL below.\n","\n","    https://accounts.google.com/o/oauth2/auth?client_id=517222506229-vsmmajv00ul0bs7p89v5m89qs8eb9359.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fearthengine+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdevstorage.full_control&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&code_challenge=IyPlpfAHWX6hvo5uXsqRFZfH8SBPqpmXTS0_eWJpQRY&code_challenge_method=S256\n","\n","The authorization workflow will generate a code, which you should paste in the box below. \n","Enter verification code: 4/2gFaQHyFmEcjDIyDyzOTeUa3cT5VM0HW5xFVe8ee9zYHGrqCoDwpTsU\n","\n","Successfully saved authorization token.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yKfzpmIZJP0H","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595955030912,"user_tz":420,"elapsed":1160,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["ee.Initialize()"],"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sERLMcosJSky","colab_type":"text"},"source":["# Mount Google Drive\n","We have shapefiles containing the geospatial boundaries of the map tiles we'll be gathering data from on our Google Drive.\n","\n","To mount our Drive and access our files, we have to authenticate with Google Drive first."]},{"cell_type":"code","metadata":{"id":"P42IP7gAJTLK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":126},"executionInfo":{"status":"ok","timestamp":1595953071282,"user_tz":420,"elapsed":21456,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}},"outputId":"f87f32e1-7760-4b1e-e036-3ae0c8eb816f"},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aq-gLalTJdDz","colab_type":"text"},"source":["# Retrieve LANDSAT Tiles\n","For each of the tiles in a GeoDataFrame, and each year for which we want to get the LANDSAT imagery, we will filter the LANDSAT collection from GEE to identify the image that includes the centroid of our tile. We will then export that LANDSAT image to our Google Drive.\n","\n","Given the frequency of LANDSAT imaging (LANDSAT 8 has a 16-day repeat cycle), we will composite LANDSAT images to match particular timeframes for each year we are interested in. \n","\n","We will composite images during these timeframes, avoiding scenes that have high cloud cover and masking pixels which are likely to be clouds.  There are three timeframes from which we want LANDSAT imagery:\n","1. **Near-NAIP:** Near the time when NAIP (aerial) 4-band imagery was acquired. The R, G, B, and NIR bands of the LANDSAT composite will be extracted and used to transform the NAIP imagery values (which are \"digital numbers\" from 1-255) into surface reflectance values using histogram matching. NAIP imagery is typically flown in the August-September timeframe in the years it is acquired.\n","2. **Leaf-On:** Composite (median value for each band) from April 1 - September 30. This image will be used to training models to recognize forest stand boundaries and other conditions. \n","3. **Leaf-Off:** Composite (median value for each band) from October 1 - March 31. This image will be used to training models to recognize forest stand boundaries and other conditions."]},{"cell_type":"code","metadata":{"id":"LohSkTGeJV8v","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595953747293,"user_tz":420,"elapsed":336,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["WORK_DIR = '/content/drive/Shared drives/stand_mapping/data/processed/training_tiles'\n","TILE_SHP = 'washington_utm10n_training_quads_epsg6339.shp'\n","LANDSAT_TILE_SHP = '/content/drive/Shared drives/stand_mapping/data/raw/landsat_tiles_WRS2_descending.shp'\n","STATE = 'WA'\n","YEARS = [2009, 2011, 2013, 2015, 2017]"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"j0fJeauZMdu4","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595979763538,"user_tz":420,"elapsed":3113,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["landsat_tiles = gpd.read_file(LANDSAT_TILE_SHP)\n","quad_tiles = gpd.read_file(os.path.join(WORK_DIR, TILE_SHP)).to_crs(landsat_tiles.crs)"],"execution_count":111,"outputs":[]},{"cell_type":"code","metadata":{"id":"0EnNnLDP0OOC","colab_type":"code","colab":{}},"source":["WORK_DIR = '/content/drive/Shared drives/stand_mapping/data/processed/training_tiles'\n","TILE_SHP = 'washington_utm11n_training_quads_epsg6340.shp'\n","STATE = 'WA'\n","YEARS = [2009, 2011, 2013, 2015, 2017]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LlKTD6KmVotU","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595983112988,"user_tz":420,"elapsed":387,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["naip = ee.ImageCollection('USDA/NAIP/DOQQ')\n","landsat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')\n","gdf = gpd.read_file(os.path.join(WORK_DIR, TILE_SHP))"],"execution_count":117,"outputs":[]},{"cell_type":"code","metadata":{"id":"yxL7bJ0fY5Sb","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595983115699,"user_tz":420,"elapsed":367,"user":{"displayName":"David D Diaz","photoUrl":"","userId":"04126922794502874183"}}},"source":["def mask_l8_sr(image):\n","    \"\"\"Masks out pixels likely to be cloud or shadow in a LANDSAT 8 image\"\"\"\n","    cloud_shadow_bit_mask = (1 << 3)  # bit 3 is shadow in QA band\n","    clouds_bit_mask = (1 << 5)  # bit 5 is cloud in QA band\n","    \n","    # Get the pixel QA band.\n","    qa = image.select('pixel_qa')\n","    # Both flags should be set to zero, indicating clear conditions.\n","    mask = qa.bitwiseAnd(cloud_shadow_bit_mask).eq(0) and (qa.bitwiseAnd(clouds_bit_mask).eq(0))\n","    return image.updateMask(mask)"],"execution_count":118,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iB38Fy7sCxV_","colab_type":"text"},"source":["## Fetching LANDSAT, Part I: Near-NAIP\n","Get 4-band landsat imagery near the date of NAIP aerial imagery, and export the resulting imagery to the same folder that we're holding the raw NAIP imagery in. "]},{"cell_type":"code","metadata":{"id":"9bcmTHAW0H0U","colab_type":"code","colab":{}},"source":["tasks = {}\n","\n","print('Retrieving images for {:,d} features in GeoDataFrame'.format(len(gdf)))\n","for year in YEARS:\n","    folder = f'naip_tiles-{STATE}-{year}'\n","    print('\\n\\n', year)\n","    for idx, row in gdf.iterrows():\n","        # get centroid of the tile and find the NAIP image(s) it falls within\n","        bbox_point = row['geometry'].centroid.buffer(1).bounds\n","        geom_point = ee.Geometry.Rectangle(bbox_point, proj=f'EPSG:{gdf.crs.to_epsg()}', evenOdd=True, geodesic=False)\n","\n","        naip_coll = naip.filterBounds(geom_point).filterDate(f'{year}-01-01', f'{year}-12-31')\n","        naip_list = coll.toList(coll.size())\n","\n","        num_images = coll.size().getInfo()\n","        if num_images == 0:\n","            print('\\n', f'CELL_ID {row.CELL_ID} matches no NAIP tiles')\n","        if num_images > 1:\n","            print('\\n', f'CELL_ID {row.CELL_ID} matches {num_images} NAIP tiles')\n","\n","        for i in range(num_images):\n","            img = ee.Image(img_list.get(i))\n","\n","            try:\n","                name = img.id().getInfo()\n","            except ee.EEException:  # no match was found\n","                print('\\n', \n","                      f'CELL_ID {row.CELL_ID} erred on NAIP tile #{i}')\n","                continue  # on to next image in img_list\n","\n","            # get the date of the naip image with a +/- 2 week window for filtering landsat images\n","            naip_date = datetime.strptime(name.split('_')[-1], '%Y%m%d')\n","            early_date = (naip_date - timedelta(days=14)).strftime('%Y-%m-%d')\n","            late_date = (naip_date + timedelta(days=14)).strftime('%Y-%m-%d')\n","\n","            # get the tile bounding box for filtering landsat images\n","            bbox_tile = row['geometry'].bounds\n","            xmin, ymin, xmax, ymax = bbox_tile\n","            (xmin, ymin), (xmax, ymax) = np.floor((xmin, ymin)), np.ceil((xmax, ymax))\n","            geom_tile = ee.Geometry.Rectangle(bbox_tile, \n","                                              proj=f'EPSG:{gdf.crs.to_epsg()}', \n","                                              evenOdd=True, \n","                                              geodesic=False)\n","            \n","            # filter landsat 8\n","            l8_coll = landsat8.filterBounds(geom_tile).filterDate(early_date, late_date)\n","            # mask clouds and get R, G, B, NIR bands, calculating median value across this timeframe\n","            l8_img = l8_coll.map(mask_l8_sr).select(['B4', 'B3', 'B2', 'B5']).reduce('median')\n","            \n","            # if no landsat tier 1 images are found in this 4-week window\n","            if len(l8_img.bandNames().getInfo()) == 0:\n","                print('\\n', f'CELL_ID {row.CELL_ID} matches no LANDSAT tiles from {early_date} to {late_date}')\n","                continue\n","                \n","            # submit a task to the server to export the image to our Drive\n","            if not os.path.exists(\n","                os.path.join('/content/drive/My Drive', folder, name+'_landsat' + '.tif')):\n","            \n","                task = ee.batch.Export.image.toDrive(l8_img,\n","                                                     description=name+'_landsat', \n","                                                     folder=folder,\n","                                                     region=geom_tile, \n","                                                     crs=f'EPSG:{gdf.crs.to_epsg()}')\n","                task.start()\n","                tasks[idx] = task  # keep track of our tasks in a dictionary\n","\n","        # report progress\n","        if idx % 100 == 0 and idx > 0:\n","            print()\n","        if idx % 10 == 0:\n","            print(idx, end='')\n","        else:\n","            print('.', end='')"],"execution_count":null,"outputs":[]}]}