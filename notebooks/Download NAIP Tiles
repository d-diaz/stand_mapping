{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Download NAIP Tiles","provenance":[{"file_id":"1-_kemBVD5F6_NDFwG_p81vP0caa91OJu","timestamp":1596044660428}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.10"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"cells":[{"cell_type":"code","metadata":{"colab_type":"code","id":"iRsnCLKQVt9P","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1596038268294,"user_tz":420,"elapsed":9526,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}},"outputId":"569f2157-11e8-403e-fbff-42d9ddbed018"},"source":["! pip install geopandas -q"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 972kB 2.8MB/s \n","\u001b[K     |████████████████████████████████| 10.9MB 9.9MB/s \n","\u001b[K     |████████████████████████████████| 14.7MB 265kB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"ExecuteTime":{"end_time":"2020-07-23T16:59:24.052890Z","start_time":"2020-07-23T16:58:54.809453Z"},"colab_type":"code","id":"Q4N2X48UUyNH","colab":{},"executionInfo":{"status":"ok","timestamp":1596038270112,"user_tz":420,"elapsed":692,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}}},"source":["import ee\n","import os\n","import geopandas as gpd"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3zYUpXM0GL3c","colab_type":"text"},"source":["## Get Earth Engine Running\n","To access GEE, we will need to authenticate our account, and then initialize a connection to a server. "]},{"cell_type":"code","metadata":{"colab_type":"code","id":"YczpvEs_WBye","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1596038288673,"user_tz":420,"elapsed":15147,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}},"outputId":"0af2b390-9b5d-422b-cd32-3b124f5a4c9a"},"source":["ee.Authenticate()"],"execution_count":3,"outputs":[{"output_type":"stream","text":["To authorize access needed by Earth Engine, open the following URL in a web browser and follow the instructions. If the web browser does not start automatically, please manually browse the URL below.\n","\n","    https://accounts.google.com/o/oauth2/auth?client_id=517222506229-vsmmajv00ul0bs7p89v5m89qs8eb9359.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fearthengine+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdevstorage.full_control&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&code_challenge=qTZLlY8Dx8myzLkgKZ_7ZvI7J430L55ZArn1EMZfzOo&code_challenge_method=S256\n","\n","The authorization workflow will generate a code, which you should paste in the box below. \n","Enter verification code: 4/2QEhgD2Mu7eW2ESmeiStn4b16pp2YZ8cX9vC7YaUO15oz1EYzRKv_u0\n","\n","Successfully saved authorization token.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GN2xzfxWKD6k","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1596038292715,"user_tz":420,"elapsed":1262,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}}},"source":["ee.Initialize()"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r3nDOYIFHdwQ","colab_type":"text"},"source":["# Mount Google Drive\n","We have shapefiles containing the geospatial boundaries of the map tiles we'll be gathering data from on our Google Drive.\n","\n","To mount our Drive and access our files, we have to authenticate with Google Drive first."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"v6hG56mMXiA9","colab":{"base_uri":"https://localhost:8080/","height":126},"executionInfo":{"status":"ok","timestamp":1596038316417,"user_tz":420,"elapsed":21962,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}},"outputId":"1c77c97d-2959-4f5f-f152-641c9e5c43d3"},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8LIYSrR0Fae0","colab_type":"text"},"source":["# Retrieve NAIP Quads\n","For each of the tiles in a GeoDataFrame, and each year for which we want to get the NAIP imagery, we will filter the NAIP collection from GEE to identify the image that includes the centroid of our tile. We will then export that NAIP image to our Google Drive."]},{"cell_type":"code","metadata":{"id":"qgNG-JjKICKZ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1596038426568,"user_tz":420,"elapsed":336,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}}},"source":["WORK_DIR = '/content/drive/Shared drives/stand_mapping/data/processed/training_tiles'\n","TILE_SHP = 'oregon_utm10n_training_quads_epsg6339.shp'\n","STATE = 'OR'\n","YEARS = [2009, 2011, \n","         #2012, \n","         #2014, 2016]\n","         ]"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"DiBzjgI33O4k","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1596038389137,"user_tz":420,"elapsed":6532,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}}},"source":["naip = ee.ImageCollection('USDA/NAIP/DOQQ')\n","gdf = gpd.read_file(os.path.join(WORK_DIR, TILE_SHP))"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gqEij-I5IOIn","colab_type":"text"},"source":["Loop through each feature in the GeoDataFrame `gdf` and submit a task on the Earth Engine server to export the corresponding NAIP image(s)."]},{"cell_type":"code","metadata":{"id":"LZC4OomptDzK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":515},"executionInfo":{"status":"ok","timestamp":1596039340342,"user_tz":420,"elapsed":909015,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}},"outputId":"07832bf1-f254-4fd0-bccc-4ce9863da51b"},"source":["tasks = {}\n","\n","print('Retrieving images for {:,d} features in GeoDataFrame'.format(len(gdf)))\n","for year in YEARS:\n","    folder = f'naip_tiles-{STATE}-{year}'\n","    print('\\n\\n', year)\n","    for idx, row in gdf.iterrows():\n","        # get centroid of the tile and find the NAIP image(s) it falls within\n","        bbox = row['geometry'].centroid.buffer(1).bounds\n","        geom = ee.Geometry.Rectangle(bbox, proj=f'EPSG:{gdf.crs.to_epsg()}', evenOdd=True, geodesic=False)\n","        coll = naip.filterBounds(geom).filterDate(f'{year}-01-01', f'{year}-12-31')\n","        img_list = coll.toList(coll.size())\n","\n","        num_images = coll.size().getInfo()\n","        if num_images == 0:\n","            print('\\n', f'CELL_ID {row.CELL_ID} matches no NAIP tiles')\n","        if num_images > 1:\n","            print('\\n', f'CELL_ID {row.CELL_ID} matches {num_images} NAIP tiles')\n","\n","        for i in range(num_images):\n","            img = ee.Image(img_list.get(i))\n","\n","            try:\n","                name = img.id().getInfo()\n","            except ee.EEException:  # no match was found\n","                print('\\n', \n","                      f'CELL_ID {row.CELL_ID} erred on NAIP tile #{i}')\n","                continue  # on to next image in img_list\n","            \n","            # submit a task to the server to export the image to our Drive\n","            if not os.path.exists(\n","                os.path.join('/content/drive/My Drive', folder, name + '.tif')):\n","            \n","                task = ee.batch.Export.image.toDrive(img,\n","                                                     description=name, \n","                                                     folder=folder)\n","                task.start()\n","                tasks[idx] = task  # keep track of our tasks in a dictionary\n","\n","        # report progress\n","        if idx % 100 == 0 and idx > 0:\n","            print()\n","        if idx % 10 == 0:\n","            print(idx, end='')\n","        else:\n","            print('.', end='')"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Retrieving images for 607 features in GeoDataFrame\n","\n","\n"," 2009\n","0.........10.........20.........30.........40.........50.........60.........70.........80.........90.........\n","100.........110.........120..\n"," CELL_ID 254524 matches 2 NAIP tiles\n",".......130.........140.........150.........160.........170.........180.........190.........\n","200.........210.........220.........230.........240.........250.........260.........270.........280.........290.........\n","300.........310.........320.........330.........340.........350.........360.........370.\n"," CELL_ID 256194 matches 2 NAIP tiles\n","..\n"," CELL_ID 264469 matches 2 NAIP tiles\n","......380.........390.........\n","400.........410.........420.........430.........440.........450.........460.........470.........480.........490.........\n","500.........510.........520.........530.........540.........550.........560.........570.........580.........590.........\n","600......\n","\n"," 2011\n","0.........10.........20.........30.........40.........50.........60.........70.........80.........90.........\n","100.........110.........120.........130.........140.........150.........160.........170.........180.........190.........\n","200.........210.........220.........230.........240.........250.........260.........270.........280.........290.........\n","300.........310.........320.........330.........340.........350.........360.........370...\n"," CELL_ID 264469 matches 2 NAIP tiles\n","......380.........390.........\n","400.........410.........420.........430.........440.........450.........460.........470.........480.........490.........\n","500.........510.........520.........530.........540.........550.........560.........570.........580.........590.........\n","600......"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DRhsvFvQCaoW","colab_type":"text"},"source":["## Missing NAIP Tiles\n","| STATE | CELL_ID | Year |\n","|:-----:|:-------:|:----:|\n","|WA|305230|2013|\n","|WA|305232|2013|\n","|WA|305229|2013|\n","\n","## Extra NAIP Tiles\n","| STATE | CELL_ID | Year | # Tiles |\n","|:-----:|:-------:|:----:|:-------:|\n","|WA|133123|2009|2|\n","|WA|133123|2011|2|\n","|WA|215589|2009|2|\n","|WA|215589|2011|2|\n","|WA|215591|2009|2|\n","|WA|215591|2011|2|\n","|OR|254524|2009|2|\n","|OR|256194|2009|2|\n","|OR|264469|2009|2|\n","|OR|264469|2011|2|"]},{"cell_type":"code","metadata":{"id":"2mHDMDSZ1JTa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1595978220880,"user_tz":420,"elapsed":682,"user":{"displayName":"David Diaz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjh1OmCKzplbVp1ZPZLYNeFVoDha8mOgjOpP5ISnQ=s64","userId":"05894085007010941086"}},"outputId":"3b3390b5-c549-43bf-b4f1-a8454e3a6a86"},"source":["import glob\n","processed = glob.glob('/content/drive/My Drive/naip_tiles-WA-2017/*.tif')\n","len(processed)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["277"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"ExecuteTime":{"end_time":"2020-07-23T20:13:00.553121Z","start_time":"2020-07-23T20:13:00.543126Z"},"colab_type":"code","id":"iInH2Y4HUyNX","colab":{}},"source":["# #grab NAIP imagery for 2009\n","# naip09 = ee.ImageCollection('USDA/NAIP/DOQQ').filterDate('2009-01-01', '2009-12-31').reduce(ee.Reducer.median())\n","# #grab NAIP imagery for 2011\n","# naip11 = ee.ImageCollection('USDA/NAIP/DOQQ').filterDate('2011-01-01', '2011-12-31').reduce(ee.Reducer.median())\n","# #grab NAIP imagery for 2013\n","# naip13 = ee.ImageCollection('USDA/NAIP/DOQQ').filterDate('2013-01-01', '2013-12-31').reduce(ee.Reducer.median())\n","# #grab NAIP imagery for 2015\n","# naip15 = ee.ImageCollection('USDA/NAIP/DOQQ').filterDate('2015-01-01', '2015-12-31').reduce(ee.Reducer.median())\n","# #grab NAIP imagery for 2017\n","# naip17 = ee.ImageCollection('USDA/NAIP/DOQQ').filterDate('2017-01-01', '2017-12-31').reduce(ee.Reducer.median())"],"execution_count":null,"outputs":[]}]}